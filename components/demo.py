import streamlit as st
import pandas as pd
from utils.recommenders import (
    recommend_baseline,
    recommend_similar_products_by_content,
    recommend_similar_products_by_options,
    display_results
)

def show(file_2, file_1, df, df_final, dictionary, tfidf_model, similarity_index, stop_words, baseline_model):
    st.markdown("## üß† Demo Recommendation")

    top_k = st.slider("üì¶ S·ªë l∆∞·ª£ng s·∫£n ph·∫©m mu·ªën g·ª£i √Ω:", 1, 20, 5)

    tab_cf, tab_content = st.tabs(["üë§ Theo t√†i kho·∫£n Shopee", "üõçÔ∏è Theo s·∫£n ph·∫©m"])

    # ============================== TAB 1: Collaborative Filtering ==============================
    with tab_cf:
        st.markdown("#### üßë Nh·∫≠p ho·∫∑c ch·ªçn t√†i kho·∫£n Shopee")

        top_users = df['user_id'].value_counts().head(20).index.tolist() if 'user_id' in df.columns else []

        col1, col2 = st.columns([2, 3])
        with col1:
            selected_user = st.selectbox("üîΩ Ch·ªçn user_id ph·ªï bi·∫øn:", options=top_users, index=0 if top_users else None)
        with col2:
            user_input = st.text_input("‚úçÔ∏è Ho·∫∑c nh·∫≠p user_id:", key="user_input_cf")

        final_user_input = user_input.strip() if user_input.strip() else str(selected_user)

        if st.button("üöÄ G·ª£i √Ω s·∫£n ph·∫©m (CF)", key="submit_user_cf"):
            if final_user_input.isdigit():
                user_id = int(final_user_input)
                results = recommend_baseline(user_id, top_k, df_final, baseline_model)
                if results is not None and not results.empty:
                    display_results(results, method="cf")
                else:
                    st.warning("‚ùå Kh√¥ng c√≥ g·ª£i √Ω cho user_id n√†y.")
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ho·∫∑c ch·ªçn user_id h·ª£p l·ªá.")

    # ============================== TAB 2: Content-Based Filtering ==============================
    with tab_content:
        st.markdown("#### üìã Ch·ªçn c√°ch nh·∫≠p th√¥ng tin s·∫£n ph·∫©m")

        method = st.radio(
            "üîç Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p s·∫£n ph·∫©m:",
            ["M√¥ t·∫£ s·∫£n ph·∫©m", "ID s·∫£n ph·∫©m", "T√™n s·∫£n ph·∫©m"],
            horizontal=True,
            key="method_selector"
        )

        query = ""
        if method == "M√¥ t·∫£ s·∫£n ph·∫©m":
            query = st.text_area("üìù Nh·∫≠p m√¥ t·∫£ s·∫£n ph·∫©m:", key="desc_input")

        elif method == "ID s·∫£n ph·∫©m":
            top_product_ids = df_final['product_id'].astype(str).value_counts().head(30).index.tolist()
            col1, col2 = st.columns([2, 3])
            with col1:
                selected_id = st.selectbox("üîΩ Ch·ªçn m√£ s·∫£n ph·∫©m:", options=top_product_ids, key="product_id_dropdown")
            with col2:
                input_id = st.text_input("‚úçÔ∏è Ho·∫∑c nh·∫≠p ID s·∫£n ph·∫©m:", key="product_id_input")
            query = input_id.strip() if input_id.strip() else selected_id

        elif method == "T√™n s·∫£n ph·∫©m":
            top_product_names = df_final['product_name'].value_counts().head(30).index.tolist()
            col1, col2 = st.columns([2, 3])
            with col1:
                selected_name = st.selectbox("üîΩ Ch·ªçn t√™n s·∫£n ph·∫©m:", options=top_product_names, key="product_name_dropdown")
            with col2:
                input_name = st.text_input("‚úçÔ∏è Ho·∫∑c nh·∫≠p t√™n s·∫£n ph·∫©m:", key="product_name_input")
            query = input_name.strip() if input_name.strip() else selected_name

        if st.button("üöÄ G·ª£i √Ω s·∫£n ph·∫©m (Content-Based)", key="recommend_content_button"):
            if query:
                with st.spinner("üîç ƒêang t√¨m s·∫£n ph·∫©m t∆∞∆°ng t·ª±..."):
                    msg, results = recommend_similar_products_by_options(
                        input_text=query,
                        dictionary=dictionary,
                        tfidf_model=tfidf_model,
                        similarity_index=similarity_index,
                        df_final=df_final,
                        stop_words=stop_words,
                        top_k=top_k
                    )

                if isinstance(results, pd.DataFrame) and not results.empty:
                    display_results(results, method="content")
                else:
                    st.warning(msg)
            else:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p th√¥ng tin s·∫£n ph·∫©m h·ª£p l·ªá.")
